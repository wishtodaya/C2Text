📁 src
  📄 extension.ts
  📄 fileSaver.ts
  📄 parser.ts
  📄 structuredTextGenerator.ts
  📄 userInterface.ts
  📄 utils.ts
  📄 webviewContent.ts

===== File: extension.ts =====
import * as vscode from 'vscode';
import { parseSelected } from './parser';
import { showUserInterface } from './userInterface';

export function activate(context: vscode.ExtensionContext) {
    const disposable = vscode.commands.registerCommand('c2text.parseSelected', async (uri: vscode.Uri) => {
        if (uri) {
            const selectedPath = uri.fsPath;
            const projectStructure = await parseSelected(selectedPath);
            if (projectStructure) {
                showUserInterface(projectStructure, selectedPath);
            } else {
                vscode.window.showErrorMessage('Failed to parse the selected file or folder.');
            }
        } else {
            vscode.window.showErrorMessage('No file or folder selected.');
        }
    });
    context.subscriptions.push(disposable);
}

export function deactivate() {}
===== End of File: extension.ts =====


===== File: fileSaver.ts =====
import * as fs from 'fs';
import * as path from 'path';

export async function saveToFile(content: string, projectPath: string): Promise<void> {
    const outputPath = fs.lstatSync(projectPath).isDirectory()
        ? path.join(projectPath, 'c2text_output.txt')
        : path.join(path.dirname(projectPath), 'c2text_output.txt');
    try {
        await fs.promises.writeFile(outputPath, content, 'utf-8');
    } catch (error) {
        console.error('Error saving structured text to file:', error);
        throw error;
    }
}
===== End of File: fileSaver.ts =====


===== File: parser.ts =====
import * as fs from 'fs';
import * as path from 'path';
import { isFolder } from './utils';

export interface FolderTree {
    name: string;
    path: string;
    children: (FolderTree | FileTree)[];
}

export interface FileTree {
    name: string;
    path: string;
    content: string;
}

export async function parseSelected(selectedPath: string): Promise<FolderTree | FileTree | null> {
    try {
        const stats = await fs.promises.stat(selectedPath);
        if (stats.isDirectory()) {
            return await parseFolder(selectedPath);
        } else if (stats.isFile()) {
            return await parseFile(selectedPath);
        } else {
            console.warn('Invalid selection. Please select a file or folder.');
            return null;
        }
    } catch (error) {
        console.error('Error parsing selected file or folder:', error);
        return null;
    }
}

async function parseFolder(folderPath: string): Promise<FolderTree> {
    const folderName = path.basename(folderPath);
    const folderTree: FolderTree = { name: folderName, path: folderPath, children: [] };
    try {
        const entries = await fs.promises.readdir(folderPath, { withFileTypes: true });
        for (const entry of entries) {
            const entryPath = path.join(folderPath, entry.name);
            if (entry.isDirectory()) {
                const subFolderTree = await parseFolder(entryPath);
                folderTree.children.push(subFolderTree);
            } else if (entry.isFile()) {
                const fileTree = await parseFile(entryPath);
                folderTree.children.push(fileTree);
            }
        }
    } catch (error) {
        console.error(`Error parsing folder "${folderPath}":`, error);
    }
    return folderTree;
}

async function parseFile(filePath: string): Promise<FileTree> {
    const fileName = path.basename(filePath);
    try {
        const fileContent = await fs.promises.readFile(filePath, 'utf-8');
        return { name: fileName, path: filePath, content: fileContent };
    } catch (error) {
        console.error(`Error parsing file "${filePath}":`, error);
        return { name: fileName, path: filePath, content: '' };
    }
}
===== End of File: parser.ts =====


===== File: structuredTextGenerator.ts =====
import * as path from 'path';
import { FolderTree, FileTree } from './parser';
import { isFolder } from './utils';

export function generateStructuredText(projectStructure: FolderTree | FileTree, projectPath: string): string {
    let structureText = generateTreeStructure(projectStructure, '', projectPath);
    let filesText = generateFilesContent(projectStructure, projectPath);
    return structureText + filesText;
}

function generateTreeStructure(node: FolderTree | FileTree, indent: string, projectPath: string): string {
    let structure = '';
    if (isFolder(node)) {
        structure += `${indent}📁 ${node.name}\n`;
        for (const child of node.children) {
            structure += generateTreeStructure(child, indent + '  ', projectPath);
        }
    } else {
        structure += `${indent}📄 ${node.name}\n`;
    }
    return structure;
}

function generateFilesContent(node: FolderTree | FileTree, projectPath: string): string {
    let content = '';
    if (isFolder(node)) {
        for (const child of node.children) {
            content += generateFilesContent(child, projectPath);
        }
    } else {
        const relativePath = path.relative(projectPath, node.path);
        content += `\n===== File: ${relativePath} =====\n`;
        content += `${node.content.trim()}\n`;
        content += `===== End of File: ${relativePath} =====\n\n`;
    }
    return content;
}
===== End of File: structuredTextGenerator.ts =====


===== File: userInterface.ts =====
import * as vscode from 'vscode';
import { FolderTree, FileTree } from './parser';
import { generateStructuredText } from './structuredTextGenerator';
import { saveToFile } from './fileSaver';
import { getWebviewContent } from './webviewContent';

export function showUserInterface(projectStructure: FolderTree | FileTree, projectPath: string): void {
    const panel = vscode.window.createWebviewPanel(
        'c2textUserInterface',
        'C2Text - Select Items to Parse',
        vscode.ViewColumn.One,
        { enableScripts: true }
    );

    panel.webview.html = getWebviewContent(projectStructure);

    panel.webview.onDidReceiveMessage(async (message) => {
        switch (message.command) {
            case 'generateStructuredText':
                const selectedPaths = message.selectedPaths;
                const filteredStructure = filterProjectStructure(projectStructure, selectedPaths);
                const structuredText = generateStructuredText(filteredStructure, projectPath);
                await saveToFile(structuredText, projectPath);
                vscode.window.showInformationMessage('Structured text generated successfully!');
                break;
        }
    });
}

function filterProjectStructure(projectStructure: FolderTree | FileTree, selectedPaths: string[]): FolderTree | FileTree {
    if (isFolder(projectStructure)) {
        const filteredChildren = projectStructure.children
            .filter(child => selectedPaths.includes(child.path) || selectedPaths.some(path => path.startsWith(child.path)))
            .map(child => {
                if (isFolder(child)) {
                    return filterProjectStructure(child, selectedPaths);
                } else {
                    return child;
                }
            });
        return { ...projectStructure, children: filteredChildren };
    }
    return projectStructure;
}

function isFolder(node: FolderTree | FileTree): node is FolderTree {
    return (node as FolderTree).children !== undefined;
}
===== End of File: userInterface.ts =====


===== File: utils.ts =====
import { FolderTree, FileTree } from './parser';

export function isFolder(node: FolderTree | FileTree): node is FolderTree {
    return (node as FolderTree).children !== undefined;
}
===== End of File: utils.ts =====


===== File: webviewContent.ts =====
import { FolderTree, FileTree } from './parser';

export function getWebviewContent(projectStructure: FolderTree | FileTree): string {
    return `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>C2Text - Select Items to Parse</title>
        <style>
            ${getStyles()}
        </style>
    </head>
    <body>
        <h1>Select Items to Parse</h1>
        <div id="itemTree">
            ${generateItemTreeHtml(projectStructure)}
        </div>
        <button id="generateButton">Generate Structured Text</button>
        <script>
            ${getScripts()}
        </script>
    </body>
    </html>
    `;
}

function getStyles(): string {
    return `
    body {
        font-family: 'Segoe UI', sans-serif;
        margin: 0;
        padding: 20px;
        background-color: #f8f8f8;
    }
    h1 {
        font-size: 24px;
        font-weight: 600;
        margin-bottom: 20px;
        color: #333;
    }
    #itemTree {
        margin-bottom: 20px;
        padding: 15px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }
    .folder-label, .file-label {
        display: flex;
        align-items: center;
        padding: 6px 0;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .folder-label:hover, .file-label:hover {
        background-color: #f0f0f0;
    }
    .folder-icon, .file-icon {
        margin-right: 8px;
    }
    .folder-name {
        font-weight: 600;
    }
    .item-contents {
        margin-left: 24px;
    }
    button {
        padding: 12px 24px;
        font-size: 16px;
        font-weight: 600;
        background-color: #007acc;
        color: #fff;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    button:hover {
        background-color: #005999;
    }
    button:active {
        background-color: #004c80;
    }
    `;
}

function getScripts(): string {
    return `
    const vscode = acquireVsCodeApi();
    function toggleCheckbox(checkbox) {
        if (checkbox.checked) {
            const childCheckboxes = checkbox.parentElement.nextElementSibling.querySelectorAll('input[type="checkbox"]');
            childCheckboxes.forEach(child => child.checked = true);
        } else {
            const childCheckboxes = checkbox.parentElement.nextElementSibling.querySelectorAll('input[type="checkbox"]');
            childCheckboxes.forEach(child => child.checked = false);
        }
    }
    document.getElementById('generateButton').addEventListener('click', () => {
        const checkboxes = document.querySelectorAll('input[type="checkbox"]:checked');
        const selectedPaths = Array.from(checkboxes).map(checkbox => checkbox.value);
        vscode.postMessage({ command: 'generateStructuredText', selectedPaths: selectedPaths });
    });
    `;
}

function generateItemTreeHtml(node: FolderTree | FileTree, indent: string = ''): string {
    let html = '';
    if (isFolder(node)) {
        html += `
        <div>
            <label class="folder-label">
                <input type="checkbox" value="${node.path}" onchange="toggleCheckbox(this)">
                <span class="folder-icon">📁</span>
                <span class="folder-name">${node.name}</span>
            </label>
            <div class="item-contents">
                ${node.children.map(child => generateItemTreeHtml(child, indent + '  ')).join('')}
            </div>
        </div>
        `;
    } else {
        html += `
        <div>
            <label class="file-label">
                <input type="checkbox" value="${node.path}">
                <span class="file-icon">📄</span>
                <span>${node.name}</span>
            </label>
        </div>
        `;
    }
    return html;
}

function isFolder(node: FolderTree | FileTree): node is FolderTree {
    return (node as FolderTree).children !== undefined;
}
===== End of File: webviewContent.ts =====

